import os
import json
import re
import pandas as pd

def parse_timing_report(report_file):
    """
    Parse the synthesis timing report to extract timing metrics.
    The report should be a text file generated by Yosys or another synthesis tool.
    
    Args:
    report_file (str): Path to the synthesis report file.
    
    Returns:
    dict: Extracted timing metrics from the report.
    """
    timing_metrics = {}

    # Read the synthesis report
    with open(report_file, 'r') as f:
        report_content = f.read()

    # Regular expressions to extract key timing metrics
    critical_path_regex = r'Critical path: (\d+\.\d+) ns'  # Modify regex based on the actual report format
    setup_violation_regex = r'Setup violation: (\d+\.\d+) ns'
    hold_violation_regex = r'Hold violation: (\d+\.\d+) ns'
    
    critical_path = re.search(critical_path_regex, report_content)
    setup_violation = re.search(setup_violation_regex, report_content)
    hold_violation = re.search(hold_violation_regex, report_content)

    if critical_path:
        timing_metrics['critical_path'] = float(critical_path.group(1))
    if setup_violation:
        timing_metrics['setup_violation'] = float(setup_violation.group(1))
    if hold_violation:
        timing_metrics['hold_violation'] = float(hold_violation.group(1))

    return timing_metrics

def process_all_reports(rtl_dir, output_dir):
    """
    Process all synthesis reports in the given directory and save the extracted timing metrics.
    
    Args:
    rtl_dir (str): Directory containing synthesis report files.
    output_dir (str): Directory where parsed timing data will be saved.
    """
    # Make sure the output directory exists
    os.makedirs(output_dir, exist_ok=True)

    # Loop over all synthesis report files in the RTL directory
    for rtl_file in os.listdir(rtl_dir):
        if rtl_file.endswith(".txt"):  # Assuming the synthesis reports have a .txt extension
            # Get the base name of the RTL file (without extension)
            top_module = os.path.splitext(rtl_file)[0]
            
            # Full path to the synthesis report file
            report_file = os.path.join(rtl_dir, rtl_file)
            
            # Parse the synthesis report
            timing_metrics = parse_timing_report(report_file)
            
            # Save the parsed timing metrics as JSON or CSV
            output_file_json = os.path.join(output_dir, f"{top_module}_timing.json")
            with open(output_file_json, 'w') as f:
                json.dump(timing_metrics, f, indent=4)

            # Optionally, you can also store the results in CSV format
            output_file_csv = os.path.join(output_dir, f"{top_module}_timing.csv")
            timing_df = pd.DataFrame([timing_metrics])
            timing_df.to_csv(output_file_csv, index=False)

            print(f"Processed timing report for {top_module}")

if __name__ == "__main__":
    # Define the directories for synthesis reports and output
    rtl_dir = os.path.expanduser('~/Google-Girl-Hackathon/Data/RTL_Sources')  # Directory containing RTL Verilog files and reports
    output_dir = os.path.expanduser('~/Google-Girl-Hackathon/Results/Timing')  # Directory to save the timing metrics

    # Process all synthesis reports in the RTL directory
    process_all_reports(rtl_dir, output_dir)
